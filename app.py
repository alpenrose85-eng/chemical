import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import RGBColor
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
import re
import io

# ================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–°–°–ò–ò + –ë–ê–ó–û–í–´–ï –ù–û–†–ú–´
# ================================
if "steel_norms" not in st.session_state:
    st.session_state.steel_norms = {
        "12–•1–ú–§": {
            "C": (0.10, 0.15),
            "Si": (0.17, 0.27),
            "Mn": (0.40, 0.70),
            "Cr": (0.90, 1.20),
            "Ni": (None, 0.25),
            "Mo": (0.25, 0.35),
            "V": (0.15, 0.30),
            "Cu": (None, 0.20),
            "S": (None, 0.025),
            "P": (None, 0.025)
        },
        "10–•13–ì12–ë–°2–ù2–î2 (–î–ò59)": {
            "C": (0.06, 0.10),
            "Si": (1.8, 2.2),
            "Mn": (12.00, 13.50),
            "Cr": (11.50, 13.00),
            "Ni": (1.8, 2.5),
            "Nb": (0.60, 1.00),
            "Cu": (2.00, 2.50),
            "S": (None, 0.02),
            "P": (None, 0.03)
        },
        "12–•18–ù12–¢": {
            "C": (None, 0.12),
            "Si": (None, 0.80),
            "Mn": (1.00, 2.00),
            "Cr": (17.00, 19.00),
            "Ni": (11.00, 13.00),
            "Ti": (None, 0.7),
            "Cu": (None, 0.30),
            "S": (None, 0.020),
            "P": (None, 0.035)
        },
        "20": {
            "C": (0.17, 0.24),
            "Si": (0.17, 0.37),
            "Mn": (0.35, 0.65),
            "Cr": (None, 0.25),
            "Ni": (None, 0.25),
            "Cu": (None, 0.30),
            "P": (None, 0.03),
            "S": (None, 0.025)
        },
        "10–•9–ú–§–ë (–î–ò82)": {
            "C": (0.08, 0.12),
            "Si": (None, 0.5),
            "Mn": (0.30, 0.60),
            "Cr": (8.60, 10.00),
            "Ni": (None, 0.70),
            "Mo": (0.60, 0.80),
            "V": (0.10, 0.20),
            "Nb": (0.10, 0.20),
            "Cu": (None, 0.30),
            "S": (None, 0.015),
            "P": (None, 0.03)
        }
    }

# ================================
# –ü–ê–†–°–ï–† –ü–†–û–¢–û–ö–û–õ–ê
# ================================
def parse_protocol_docx(file):
    doc = Document(file)
    full_text = "\n".join([p.text for p in doc.paragraphs])
    tables = doc.tables

    samples = []
    sample_blocks = re.split(r"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞\s*:", full_text)
    content_blocks = sample_blocks[1:]

    table_iter = iter(tables)
    for block in content_blocks:
        lines = block.strip().split("\n")
        sample_name = lines[0].strip()

        steel_match = re.search(r"–º–∞—Ä–∫–µ —Å—Ç–∞–ª–∏:\s*([–ê-–Ø–∞-—è0-9–•—Ö\(\)\s\-]+)", block)
        if steel_match:
            steel_grade = steel_match.group(1).strip()
            if "," in steel_grade:
                steel_grade = steel_grade.split(",")[0].strip()
        else:
            steel_grade = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        notes = ""
        if "—Å —É—á–µ—Ç–æ–º –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π" in block:
            notes = "—Å —É—á–µ—Ç–æ–º –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è"

        try:
            table1 = next(table_iter)
            table2 = next(table_iter)
        except StopIteration:
            break

        all_elements = {}
        for tbl in [table1, table2]:
            headers = []
            for cell in tbl.rows[0].cells:
                txt = cell.text.strip().replace("\n", "").replace("%", "").strip()
                if txt and txt not in ["", "1", "2", "3"]:
                    headers.append(txt)

            mean_row = None
            unc_row = None
            for row in tbl.rows:
                first = row.cells[0].text.strip()
                if first == "–°—Ä–µ–¥–Ω–µ–µ:":
                    mean_row = row
                elif "¬±" in first:
                    unc_row = row

            if mean_row and unc_row:
                for j, elem in enumerate(headers):
                    if j + 1 < len(mean_row.cells):
                        try:
                            mean_val = float(mean_row.cells[j + 1].text.replace(",", ".").strip())
                            unc_text = unc_row.cells[j + 1].text.replace("¬±", "").replace(",", ".").strip()
                            unc_val = float(unc_text)
                            all_elements[elem] = {"mean": mean_val, "unc": unc_val}
                        except (ValueError, IndexError):
                            continue

        samples.append({
            "name": sample_name,
            "steel": steel_grade,
            "elements": all_elements,
            "notes": notes
        })

    return samples

# ================================
# –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê
# ================================
def evaluate_status(value, unc, norm_min, norm_max):
    low = value - unc
    high = value + unc
    if norm_min is not None and high < norm_min:
        return "üî¥"
    if norm_max is not None and low > norm_max:
        return "üî¥"
    if (norm_min is not None and low < norm_min <= high) or (norm_max is not None and low <= norm_max < high):
        return "üü°"
    return ""

def format_value(val, elem):
    return f"{val:.3f}" if elem in ["S", "P"] else f"{val:.2f}"

# ================================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø WORD-–û–¢–ß–Å–¢–ê
# ================================
def create_word_report(all_samples, steel_norms):
    doc = Document()
    doc.add_heading('–û—Ç—á—ë—Ç –ø–æ —Ö–∏–º–∏—á–µ—Å–∫–æ–º—É —Å–æ—Å—Ç–∞–≤—É –º–µ—Ç–∞–ª–ª–∞', 0)
    doc.add_paragraph('–ò—Å—Ç–æ—á–Ω–∏–∫: –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏')

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–æ—Ä–º–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    norm_elements = set()
    for norms in steel_norms.values():
        norm_elements.update(norms.keys())
    norm_elements = sorted(norm_elements, key=lambda x: ["C", "Si", "Mn", "Cr", "Ni", "Mo", "V", "Cu", "S", "P"].index(x) if x in ["C", "Si", "Mn", "Cr", "Ni", "Mo", "V", "Cu", "S", "P"] else 999)

    # –¢–∞–±–ª–∏—Ü–∞
    cols = ["–û–±—Ä–∞–∑–µ—Ü"] + norm_elements
    table = doc.add_table(rows=1, cols=len(cols))
    table.style = 'Table Grid'
    hdr = table.rows[0].cells
    for i, c in enumerate(cols):
        hdr[i].text = c

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏
    for sample in all_samples:
        steel = sample["steel"]
        norms = steel_norms.get(steel, {})
        if not norms:
            continue
        row_cells = table.add_row().cells
        row_cells[0].text = sample["name"]
        for j, elem in enumerate(norm_elements, start=1):
            if elem in sample["elements"]:
                val = sample["elements"][elem]["mean"]
                unc = sample["elements"][elem]["unc"]
                nmin, nmax = norms.get(elem, (None, None))
                status = evaluate_status(val, unc, nmin, nmax)
                txt = format_value(val, elem)
                row_cells[j].text = txt
                if status == "üî¥":
                    shading = OxmlElement('w:shd')
                    shading.set(qn('w:fill'), 'ffcccc')
                    row_cells[j]._element.get_or_add_tcPr().append(shading)
                elif status == "üü°":
                    shading = OxmlElement('w:shd')
                    shading.set(qn('w:fill'), 'fffacd')
                    row_cells[j]._element.get_or_add_tcPr().append(shading)
            else:
                row_cells[j].text = "‚Äì"

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    doc.add_heading('–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑', level=1)
    for sample in all_samples:
        steel = sample["steel"]
        norms = steel_norms.get(steel, {})
        if not norms:
            continue
        doc.add_heading(f"{sample['name']} (—Å—Ç–∞–ª—å {steel})", level=2)
        for elem, (nmin, nmax) in norms.items():
            if elem in sample["elements"]:
                val = sample["elements"][elem]["mean"]
                unc = sample["elements"][elem]["unc"]
                status = evaluate_status(val, unc, nmin, nmax)
                interval = f"[{val - unc:.3f}; {val + unc:.3f}]"
                if status == "üî¥":
                    doc.add_paragraph(f"üî¥ {elem}: {format_value(val, elem)} ¬± {unc:.3f} ‚Üí {interval} ‚Äî –í–ù–ï –Ω–æ—Ä–º")
                elif status == "üü°":
                    doc.add_paragraph(f"üü° {elem}: {format_value(val, elem)} ¬± {unc:.3f} ‚Üí {interval} ‚Äî –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                else:
                    doc.add_paragraph(f"‚úÖ {elem}: {format_value(val, elem)} ¬± {unc:.3f} ‚Üí {interval} ‚Äî –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º")
        if sample["notes"]:
            doc.add_paragraph(f"üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {sample['notes']}")

    # –õ–µ–≥–µ–Ω–¥–∞
    doc.add_heading('–õ–µ–≥–µ–Ω–¥–∞', level=1)
    doc.add_paragraph("üî¥ ‚Äî —è–≤–Ω–æ–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ—Ä–º–∞–º\nüü° ‚Äî –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n‚úÖ ‚Äî —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ—Ä–º–∞–º")

    return doc

# ================================
# –ò–ù–¢–ï–†–§–ï–ô–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ê–†–ö–ê–ú–ò
# ================================
st.sidebar.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–∞–º–∏ —Å—Ç–∞–ª–µ–π")
steel_to_edit = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é",
    options=[""] + list(st.session_state.steel_norms.keys()),
    format_func=lambda x: x if x else "‚ûï –ù–æ–≤–∞—è –º–∞—Ä–∫–∞"
)
new_steel_name = st.sidebar.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏", value=steel_to_edit or "")
if new_steel_name:
    current_norms = st.session_state.steel_norms.get(new_steel_name, {})
    elements = ["C", "Si", "Mn", "Cr", "Ni", "Mo", "V", "Cu", "S", "P", "Al", "Co", "Nb", "Ti", "W"]
    edited_norms = {}
    for elem in elements:
        col1, col2 = st.sidebar.columns(2)
        min_val = col1.text_input(f"{elem} min", value=str(current_norms.get(elem, (None, None))[0] or ""))
        max_val = col2.text_input(f"{elem} max", value=str(current_norms.get(elem, (None, None))[1] or ""))
        min_f = float(min_val) if min_val else None
        max_f = float(max_val) if max_val else None
        if min_f is not None or max_f is not None:
            edited_norms[elem] = (min_f, max_f)
    if st.sidebar.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ—Ä–º—ã"):
        st.session_state.steel_norms[new_steel_name] = edited_norms
        st.sidebar.success(f"–ù–æ—Ä–º—ã –¥–ª—è {new_steel_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

# ================================
# –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–°
# ================================
st.title("–ê–Ω–∞–ª–∏–∑ —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –º–µ—Ç–∞–ª–ª–∞")
uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã (.docx)", type=["docx"], accept_multiple_files=True)

all_samples = []
if uploaded_files:
    for f in uploaded_files:
        samples = parse_protocol_docx(f)
        all_samples.extend(samples)

if not all_samples:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx")
    st.stop()

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
rows = []
for sample in all_samples:
    steel = sample["steel"]
    norms = st.session_state.steel_norms.get(steel, {})
    if not norms:
        continue
    row = {"–û–±—Ä–∞–∑–µ—Ü": sample["name"], "–ú–∞—Ä–∫–∞": steel}
    for elem in norms:
        if elem in sample["elements"]:
            val = sample["elements"][elem]["mean"]
            unc = sample["elements"][elem]["unc"]
            row[elem] = val
            row[f"{elem}_unc"] = unc
        else:
            row[elem] = None
    rows.append(row)

if not rows:
    st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –º–∞—Ä–∫–∞–º.")
    st.stop()

# HTML-—Ç–∞–±–ª–∏—Ü–∞
norm_elements = set()
for norms in st.session_state.steel_norms.values():
    norm_elements.update(norms.keys())
norm_elements = sorted(norm_elements, key=lambda x: ["C", "Si", "Mn", "Cr", "Ni", "Mo", "V", "Cu", "S", "P"].index(x) if x in ["C", "Si", "Mn", "Cr", "Ni", "Mo", "V", "Cu", "S", "P"] else 999)

df_display = pd.DataFrame(rows)
cols_order = ["–û–±—Ä–∞–∑–µ—Ü"] + [e for e in norm_elements if e in df_display.columns]
df_display = df_display[cols_order]

html_rows = ["<tr>" + "".join(f"<th>{c}</th>" for c in cols_order) + "</tr>"]
for _, r in df_display.iterrows():
    row_html = f"<td>{r['–û–±—Ä–∞–∑–µ—Ü']}</td>"
    steel = next((s["steel"] for s in all_samples if s["name"] == r["–û–±—Ä–∞–∑–µ—Ü"]), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    norms = st.session_state.steel_norms.get(steel, {})
    for elem in cols_order[1:]:
        val = r.get(elem, None)
        if pd.isna(val):
            row_html += "<td>‚Äì</td>"
        else:
            unc = r.get(f"{elem}_unc", 0)
            nmin, nmax = norms.get(elem, (None, None))
            status = evaluate_status(val, unc, nmin, nmax)
            txt = format_value(val, elem)
            if status == "üî¥":
                row_html += f'<td style="background-color:#ffcccc">{txt}</td>'
            elif status == "üü°":
                row_html += f'<td style="background-color:#fffacd">{txt}</td>'
            else:
                row_html += f"<td>{txt}</td>"
    html_rows.append("<tr>" + row_html + "</tr>")

html_table = f'<table border="1" style="border-collapse:collapse;">{"".join(html_rows)}</table>'
st.markdown("### –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ Word):")
st.markdown(html_table, unsafe_allow_html=True)

# –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
if st.button("üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤ Word (.docx)"):
    doc = create_word_report(all_samples, st.session_state.steel_norms)
    bio = io.BytesIO()
    doc.save(bio)
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç.docx",
        data=bio.getvalue(),
        file_name="–û—Ç—á—ë—Ç_—Ö–∏–º—Å–æ—Å—Ç–∞–≤_–º–µ—Ç–∞–ª–ª–∞.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

# –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
for sample in all_samples:
    steel = sample["steel"]
    norms = st.session_state.steel_norms.get(steel, {})
    if not norms:
        continue
    with st.expander(f"üîç {sample['name']} (—Å—Ç–∞–ª—å {steel})"):
        for elem, (nmin, nmax) in norms.items():
            if elem in sample["elements"]:
                val = sample["elements"][elem]["mean"]
                unc = sample["elements"][elem]["unc"]
                status = evaluate_status(val, unc, nmin, nmax)
                interval = f"[{val - unc:.3f}; {val + unc:.3f}]"
                if status == "üî¥":
                    st.error(f"{elem}: {format_value(val, elem)} ¬± {unc:.3f} ‚Üí {interval} ‚Äî –í–ù–ï –Ω–æ—Ä–º")
                elif status == "üü°":
                    st.warning(f"{elem}: {format_value(val, elem)} ¬± {unc:.3f} ‚Üí {interval} ‚Äî –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–µ")
                else:
                    st.success(f"{elem}: {format_value(val, elem)} ¬± {unc:.3f} ‚Üí {interval} ‚Äî –≤ –Ω–æ—Ä–º–µ")
        if sample["notes"]:
            st.info(f"üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {sample['notes']}")