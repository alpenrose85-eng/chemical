def match_sample_names(self, samples, correct_names_file):
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –æ–±—Ä–∞–∑—Ü–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    if not correct_names_file:
        return samples, []
    
    correct_samples = self.name_matcher.parse_correct_names(correct_names_file.getvalue())
    
    if not correct_samples:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤")
        return samples, []
    
    matched_samples = []
    unmatched_samples = []
    
    for sample in samples:
        # –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        original_protocol_name = sample['name']
        
        protocol_sample_info = self.name_matcher.parse_protocol_sample_name(original_protocol_name)
        best_match = self.name_matcher.find_best_match(protocol_sample_info, correct_samples)
        
        if best_match:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ–±—Ä–∞–∑—Ü–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –Ω–æ–º–µ—Ä–æ–º
            corrected_sample = sample.copy()
            corrected_sample['original_name'] = original_protocol_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            corrected_sample['name'] = best_match['original']           # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
            corrected_sample['correct_number'] = best_match['number']   # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            corrected_sample['automatically_matched'] = True
            matched_samples.append(corrected_sample)
        else:
            # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            sample['original_name'] = original_protocol_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            sample['correct_number'] = None                   # –ù–µ—Ç –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            sample['automatically_matched'] = False
            unmatched_samples.append(sample)
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
    if matched_samples:
        st.success(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {len(matched_samples)} –æ–±—Ä–∞–∑—Ü–æ–≤")
        
        with st.expander("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤"):
            match_data = []
            for sample in matched_samples:
                match_data.append({
                    '–ù–æ–º–µ—Ä': sample['correct_number'],
                    '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': sample['original_name'],
                    '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': sample['name']
                })
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É
            match_data.sort(key=lambda x: x['–ù–æ–º–µ—Ä'])
            st.table(pd.DataFrame(match_data))
    
    if unmatched_samples:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å {len(unmatched_samples)} –æ–±—Ä–∞–∑—Ü–æ–≤")
        
        with st.expander("‚ö†Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤"):
            unmatched_data = []
            for sample in unmatched_samples:
                unmatched_data.append({
                    '–û–±—Ä–∞–∑–µ—Ü': sample['original_name'],
                    '–ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏': sample['steel_grade']
                })
            st.table(pd.DataFrame(unmatched_data))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—Ü—ã –ø–æ –Ω–æ–º–µ—Ä—É, –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ü–µ
    matched_samples.sort(key=lambda x: x['correct_number'])
    return matched_samples + unmatched_samples, correct_samples
