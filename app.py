import streamlit as st
import pandas as pd
import re
from docx import Document

def safe_extract_text_from_docx(uploaded_file):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞"""
    try:
        doc = Document(uploaded_file)
        full_text = ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        for paragraph in doc.paragraphs:
            full_text += paragraph.text + "\n"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    full_text += cell.text + " | "
                full_text += "\n"
            full_text += "\n"
        
        return full_text
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return ""

def parse_samples_simple(text):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤"""
    samples = []
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–∑—Ü–∞–º
    sections = re.split(r'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞:', text)
    
    for section in sections[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ–∫—Ü–∏—é (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
        sample_data = {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è)
        first_line = section.split('\n')[0].strip()
        if first_line:
            sample_data['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞'] = first_line
        
        # –ò—â–µ–º –º–∞—Ä–∫—É —Å—Ç–∞–ª–∏
        steel_match = re.search(r'12–•[^\s]+', section)
        if steel_match:
            sample_data['–ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏'] = steel_match.group(0)
        
        # –ò—â–µ–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0.123
        numbers = re.findall(r'\b\d+\.\d+\b', section)
        
        # –û–±—ã—á–Ω–æ –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–∑—Ü–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 16 —á–∏—Å–µ–ª (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —ç—Ç–æ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        if len(numbers) >= 16:
            elements = ['C', 'Si', 'Mn', 'P', 'S', 'Cr', 'Mo', 'Ni', 
                       'Cu', 'Al', 'Co', 'Nb', 'Ti', 'V', 'W', 'Fe']
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 16 —á–∏—Å–µ–ª –∫–∞–∫ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            avg_numbers = numbers[-16:]
            
            for i, element in enumerate(elements):
                try:
                    sample_data[element] = float(avg_numbers[i])
                except (ValueError, IndexError):
                    sample_data[element] = None
        
        if sample_data.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞'):
            samples.append(sample_data)
    
    return samples

def main():
    st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞", layout="wide")
    
    st.title("üî¨ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –º–µ—Ç–∞–ª–ª–∞")
    st.markdown("---")
    
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏–π (.docx)", type="docx")
    
    if uploaded_file is not None:
        try:
            with st.spinner("–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞..."):
                text_content = safe_extract_text_from_docx(uploaded_file)
            
            if not text_content:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞
            with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)"):
                st.text(text_content[:1000])
            
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
                samples_data = parse_samples_simple(text_content)
            
            if samples_data:
                st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(samples_data)} –æ–±—Ä–∞–∑—Ü–æ–≤")
                
                # –°–æ–∑–¥–∞–µ–º DataFrame
                df = pd.DataFrame(samples_data)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
                st.dataframe(df, use_container_width=True)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º")
                numeric_cols = df.select_dtypes(include=['number']).columns
                if len(numeric_cols) > 0:
                    st.dataframe(df[numeric_cols].describe(), use_container_width=True)
                
                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
                st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
                csv = df.to_csv(index=False, encoding='utf-8-sig')
                st.download_button(
                    "üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV",
                    data=csv,
                    file_name="—Ö–∏–º–∏—á–µ—Å–∫–∏–π_—Å–æ—Å—Ç–∞–≤.csv",
                    mime="text/csv"
                )
                
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ —Ñ–∞–π–ª–µ")
                st.info("""
                **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
                - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü—ã —Å —Ö–∏–º–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–∞–≤–æ–º
                - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–º–µ—Ä—É
                - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                """)
                
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ")
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞
    st.markdown("---")
    st.subheader("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞")
    
    text_input = st.text_area(
        "–ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:",
        height=300,
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."
    )
    
    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç") and text_input:
        with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞..."):
            samples_data = parse_samples_simple(text_input)
        
        if samples_data:
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(samples_data)} –æ–±—Ä–∞–∑—Ü–æ–≤")
            df = pd.DataFrame(samples_data)
            st.dataframe(df, use_container_width=True)
            
            csv = df.to_csv(index=False, encoding='utf-8-sig')
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å CSV",
                data=csv,
                file_name="chemical_composition.csv",
                mime="text/csv"
            )
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ")

if __name__ == "__main__":
    main()
